// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.6.1
// source: proto/testapp.proto

package grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TestappClient is the client API for Testapp service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TestappClient interface {
	Ping(ctx context.Context, in *TestappPingRequest, opts ...grpc.CallOption) (*TestappPingResponse, error)
}

type testappClient struct {
	cc grpc.ClientConnInterface
}

func NewTestappClient(cc grpc.ClientConnInterface) TestappClient {
	return &testappClient{cc}
}

func (c *testappClient) Ping(ctx context.Context, in *TestappPingRequest, opts ...grpc.CallOption) (*TestappPingResponse, error) {
	out := new(TestappPingResponse)
	err := c.cc.Invoke(ctx, "/grpc.Testapp/Ping", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TestappServer is the server API for Testapp service.
// All implementations must embed UnimplementedTestappServer
// for forward compatibility
type TestappServer interface {
	Ping(context.Context, *TestappPingRequest) (*TestappPingResponse, error)
	mustEmbedUnimplementedTestappServer()
}

// UnimplementedTestappServer must be embedded to have forward compatible implementations.
type UnimplementedTestappServer struct {
}

func (UnimplementedTestappServer) Ping(context.Context, *TestappPingRequest) (*TestappPingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedTestappServer) mustEmbedUnimplementedTestappServer() {}

// UnsafeTestappServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TestappServer will
// result in compilation errors.
type UnsafeTestappServer interface {
	mustEmbedUnimplementedTestappServer()
}

func RegisterTestappServer(s grpc.ServiceRegistrar, srv TestappServer) {
	s.RegisterService(&Testapp_ServiceDesc, srv)
}

func _Testapp_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TestappPingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TestappServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.Testapp/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TestappServer).Ping(ctx, req.(*TestappPingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Testapp_ServiceDesc is the grpc.ServiceDesc for Testapp service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Testapp_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.Testapp",
	HandlerType: (*TestappServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _Testapp_Ping_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/testapp.proto",
}
